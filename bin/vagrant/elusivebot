#!/usr/bin/env python3

import argparse
from collections import namedtuple
import os
from pathlib import Path
import subprocess
import sys

PackageDefinition = namedtuple('PackageDefinition', ['name', 'dev', 'prod', 'priority'])

class Package:
    def __init__(self, definition: PackageDefinition, src_dir: Path, working_dir: Path):
        self.name = definition.name
        self.definition = definition
        self.src_dir = src_dir / self.name
        self.working_dir = working_dir / self.name
        self._build_script = self.working_dir / 'bin' / 'build'
        self._deploy_script = self.working_dir / 'bin' / 'deploy'
        self._init_script = self.src_dir / 'bin' / 'init'

        self.exists = self.src_dir.is_dir()

    def init(self):
        if not self.exists:
            print("Package {} is not checked out!".format(self.name))
            return False
        if not self._init_script.is_file():
            print("Package {} does not have an init script @ {}".format(self.name, self._init_script))
            return False

        cmd = [str(self._init_script), str(self.working_dir)]
        print("Initializing {} using '{}'...".format(self.name, " ".join(cmd)))
        subprocess.run(cmd, cwd=self.src_dir, check=True)
        return True

    def build(self):
        if not self.exists:
            print("Package {} is not checked out!".format(self.name))
        if not self._build_script.is_file():
            print("Package {} does not have a build script @ {}".format(self.name, self._build_script))
            return False

        print("Building {} using '{}'...".format(self.name, self._build_script))
        subprocess.run(self._build_script, cwd=self.working_dir, check=True)
        return True

    def deploy(self):
        if not self.exists:
            print("Package {} is not checked out!".format(self.name))
            return False
        if not self._build_script.is_file():
            print("Package {} does not have a deploy script @ {}".format(self.name, self._deploy_script))
            return False

        print("Deploying {} using '{}'...".format(self.name, self._deploy_script))
        subprocess.run(self._deploy_script, cwd=self.working_dir, check=True)
        return True

    def print_status(self):
        print("\t{}: {}".format(self.name, "found" if self.exists else "MISSING"))

class ElusiveBot:
    def __init__(self, src_dir: Path, working_dir: Path):
        self._packages = {}

        def _define(name, priority=2, dev=True, prod=True):
            self._packages[name] = Package(PackageDefinition(name, priority=priority, dev=dev, prod=prod), src_dir, working_dir)

        # Core and utility packages
        _define("elusivebot-deploy")
        _define("elusivebot-schema", priority=0)
        _define("elusivebot-kotlin-common", priority=1)

        # Common services
        _define("elusivebot-pattern-match-behavior")

        # Development only services
        _define("elusivebot-direct", prod=False)
        _define("elusivebot-frontend", prod=False)
        _define("elusivebot-http", prod=False)

        # Prod only services
        _define("elusivebot-discord", dev=False)

        self._src_dir = src_dir
        self._working_dir = working_dir

        self._dev_missing = []
        self._prod_missing = []


        for package in self._packages.values():
            if not package.exists:
                if package.definition.dev:
                    self._dev_missing.append(package.name)
                if package.definition.prod:
                    self._prod_missing.append(package.name)

        self.dev_ready = not self._dev_missing
        self.prod_ready = not self._prod_missing

    def build_all(self):
        self.build(packages=self._packages.keys())

    def build(self, packages):
        for package in packages:
            self._packages[package].build()

    def deploy_all(self):
        self.deploy(packages=self._packages.keys())

    def deploy(self, packages):
        for package in packages:
            self._packages[package].deploy()

    def init_all(self):
        self.init(packages=self._packages.keys())

    def init(self, packages):
        for package in packages:
            self._packages[package].init()

    def print_status(self):
        for package in self._packages.values():
            package.print_status()

        if not self.dev_ready:
            print("Missing packages for dev stack", self._dev_missing)
        if not self.prod_ready:
            print("Missing packages for prod stack", self._prod_missing)

def main(argv):
    script_dir = Path(__file__).absolute().parent
    if str(script_dir) == '/vagrant_bin':
        src_dir = Path('/elusivebot')
        working_dir = Path('/build')
    else:
        src_dir = working_dir = Path(script_dir).parent.parent.parent

    parser = argparse.ArgumentParser(description='Core utility script for developing ElusiveBot.')

    parser.add_argument('-d', '--dir', type=Path, nargs=1, help='Set the parent directory of checked out ELB repositories')

    subparser = parser.add_subparsers(dest='command')

    status_parser = subparser.add_parser("status", aliases=['ls'], help='Print status of ElusiveBot packages')

    init_parser = subparser.add_parser("init", aliases=['i'], help='Initialize ElusiveBot packages')
    init_parser.add_argument('-a', '--all', action='store_true', help='Init all packages')
    init_parser.add_argument('target', nargs='*', help='Packages to initialize')

    build_parser = subparser.add_parser("build", aliases=['b'], help='Build ElusiveBot packages')
    build_parser.add_argument('-a', '--all', action='store_true', help='Build all packages')
    build_parser.add_argument('target', nargs='*', help='Packages to build')

    deploy_parser = subparser.add_parser("deploy", aliases=['d'], help='Deploy ElusiveBot packages')
    deploy_parser.add_argument('-a', '--all', action='store_true', help='Deploy all packages')
    deploy_parser.add_argument('target', nargs='*', help='Packages to deploy')

    docs_parser = subparser.add_parser('docs', help='Manage ElusiveBot common documentation')
    docs_subparser = docs_parser.add_subparsers(dest='docs')

    serve_parser = docs_subparser.add_parser('serve', help='Launch the documentation website')
    serve_parser.add_argument('-p', '--port', type=int, default=8000, help='Port to listen on, default is 8000')

    docs_init_parser = docs_subparser.add_parser('init', help='Initialize the docs repo')

    docs_diagrams_parser = docs_subparser.add_parser('diagrams', help='Build documentation diagrams')

    docker_parser = subparser.add_parser('docker', help='Manage the dev Docker stack')
    docker_subparser = docker_parser.add_subparsers(dest='docker')

    up_parser = docker_subparser.add_parser('up', help='Launch the dev stack')
    down_parser = docker_subparser.add_parser('down', help='Terminate the dev stack')

    args = parser.parse_args(argv)

    if args.dir:
        dev_dir = args.dir

    print("Using {} as ELB source directory".format(src_dir))
    if src_dir != working_dir:
        print("Using {} as ELB working directory".format(working_dir))

    if not src_dir.is_dir():
        print("ELB source directory missing or not a directory!")
        sys.exit(-1)

    elusivebot = ElusiveBot(src_dir, working_dir)

    if args.command == 'status':
        elusivebot.print_status()
    elif args.command == 'init':
        if args.all:
            elusivebot.init_all()
        else:
            elusivebot.init(args.target)
    elif args.command == 'build':
        if args.all:
            elusivebot.build_all()
        else:
            elusivebot.build(args.target)
    elif args.command == 'deploy':
        if args.all:
            elusivebot.deploy_all()
        else:
            elusivebot.deploy(args.target)
    elif args.command == 'docs':
        if args.docs == 'serve':
            cmd = ['./bin/serve', '-a', "0.0.0.0:{}".format(args.port)]
            subprocess.run(cmd, cwd=working_dir / 'elusivebot-docs', check=True)
        elif args.docs == 'init':
            subprocess.run(['./bin/init', working_dir / 'elusivebot-docs'], cwd=src_dir / 'elusivebot-docs', check=True)
        elif args.docs == 'diagrams':
            subprocess.run('./bin/build-diagrams', cwd=working_dir / 'elusivebot-docs', check=True)
        else:
            raise NotImplementedError("Docs subcommand {}".format(args.docs))
    elif args.command == 'docker':
        if args.docker == 'up':
            subprocess.run('./bin/dev/up', cwd=working_dir / 'elusivebot-deploy', check=True)
        elif args.docker == 'down':
            subprocess.run('./bin/dev/down', cwd=working_dir / 'elusivebot-deploy', check=True)
        else:
            raise NotImplementedError("Docker subcommand {}".format(args.docker))
    else:
        raise NotImplementedError("Unhandled command {}".format(args.command))

if __name__ == '__main__':
    main(sys.argv[1:])
